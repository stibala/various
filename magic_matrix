# solution to https://www.hackerrank.com/challenges/magic-square-forming/problem
#!/bin/python3

import math
import os
import random
import re
import sys
from itertools import chain

#
# Complete the 'formingMagicSquare' function below.
#
# The function is expected to return an INTEGER.
# The function accepts 2D_INTEGER_ARRAY s as parameter.
#

class Matrix:
    def __init__(self, conf, dimx, dimy):
        self.conf = conf
        self.dimx = dimx
        self.dimy = dimy
        
    def __sub__(self, other):
        if type(self) != type(other) or self.dimx != other.dimx or self.dimy != other.dimy:
            raise NotImplementedError
        return sum(abs(s-o) for s,o in chain(*[list(zip(*item)) for item in zip(self.conf,other.conf)]))
    
    def rotate(self):
        # genius matrix rotation: zip(*origina[::-1])
        return Matrix(list(zip(*self.conf[::-1])), self.dimy, self.dimx)
    
    def mirror(self):
        return Matrix(list(item[::-1] for item in self.conf), self.dimx, self.dimy)
    


def formingMagicSquare(s):
    # Write your code here
    orig = Matrix(s, 3, 3)
    magicSeed = Matrix([(6,1,8), (7,5,3), (2,9,4)], 3, 3)
    magic_matrices = []
    for m in range(4):
        magicSeed = magicSeed.rotate()
        magic_matrices.append(magicSeed)
        magic_matrices.append(magicSeed.mirror())
        
    return min(abs(m - orig) for m in magic_matrices)
        
    

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    s = []

    for _ in range(3):
        s.append(list(map(int, input().rstrip().split())))

    result = formingMagicSquare(s)

    fptr.write(str(result) + '\n')

    fptr.close()
